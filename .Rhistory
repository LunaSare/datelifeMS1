}
unpadded.matrices <- unpadded.matrices[good.matrix.indices]
used.studies <- used.studies[good.matrix.indices]
weights = rep(1, length(unpadded.matrices))
message(cat("\n", "Synthesizing", length(unpadded.matrices), "chronograms with SDM"))
SDM.result <- do.call(ape::SDM, c(unpadded.matrices, weights))[[1]]
phangorn::upgma(SDM.result)
D <- SDM.result
DD <- as.dist(D)
cluster::agnes(x = DD)
DD
head(DD)
DD[1:5,]
str(DD)
?agnes
cluster::daisy(x = DD)
length(DD)
dim(DD)
SDM.result
class(D)
cluster::daisy(x = D)
dc <- cluster::daisy(x = D)
result <- as.phylo(hc)
result <- ape::as.phylo(hc)
result <- ape::as.phylo(dc)
DD <- cluster::daisy(x = DD) # needs a matrix not a dist object
DD <- cluster::daisy(x = D) # needs a matrix not a dist object
hc <- hclust(DD, method = method, ...) # original
hc <- hclust(DD, method = method) # original
method = "average"
hc <- hclust(DD, method = method) # original
result <- ape::as.phylo(hc)
result <- reorder(result, "postorder")
ape::plot.phylo(result)
getwd()
pdf("/Users/luna/Google Drive/datelife/dating_otol/1_thraupidae/thra_sdm_test_daisy_2018.04.04.pdf")
ape::plot.phylo(result)
dev.off()
pdf("/Users/luna/Google Drive/datelife/dating_otol/1_thraupidae/thra_sdm_try_daisy_2018.04.04.pdf", height=50)
ape::plot.phylo(result)
dev.off()
ape::is.ultrametric(result)
pdf("/Users/luna/Google Drive/datelife/dating_otol/1_thraupidae/thra_sdm_try_daisy_hclust.pdf", height=50)
ape::plot.phylo(result)
dev.off()
ac <- cluster::agnes(x = DD)
result2 <- ape::as.phylo(ac)
DD <- cluster::daisy(x = D)
ac <- cluster::agnes(x = DD)
result2 <- ape::as.phylo(ac)
ac
str(ac)
str(hc)
D <- felid_sdm$data
SDM.result <- do.call(ape::SDM, c(unpadded.matrices, weights))[[1]]
unpadded.matrices <- felid_sdm$data
weights = rep(1, length(unpadded.matrices))
SDM.result <- do.call(ape::SDM, c(unpadded.matrices, weights))[[1]]
D <- SDM.result
DD <- cluster::daisy(x = SDM.result)
hc <- hclust(DD, method = method) # original clustering method from phangorn::upgma, to compare to agnes agnes object need tweaking to be read by as.phylo
phy <- ape::as.phylo(hc)
phy <- reorder(result, "postorder")
plot(phy)
is.ultrametric(phy)
ape::is.ultrametric(phy)
pdf("/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_try_daisy_hclus.pdf", height=50)
ape::plot.phylo(phy)
dev.off()
unpadded.matrices <- felid_sdm$data
weights = rep(1, length(unpadded.matrices))
SDM.result <- do.call(ape::SDM, c(unpadded.matrices, weights))[[1]]
D <- SDM.result
DD <- cluster::daisy(x = SDM.result)
hc <- hclust(DD, method = method) # original clustering method from phangorn::upgma, to compare to agnes agnes object need tweaking to be read by as.phylo
phy <- ape::as.phylo(hc)
phy <- reorder(result, "postorder")
plot(phy)
phy$tip.label
felid_sdm$data
phy$tip.label
unpadded.matrices <- felid_sdm$data
unpadded.matrices
weights = rep(1, length(unpadded.matrices))
SDM.resultfel <- do.call(ape::SDM, c(unpadded.matrices, weights))[[1]]
Dfel <- SDM.resultfel
Dfel
Dfel
DDfel <- cluster::daisy(x = Dfel)
hcfel <- hclust(DDfel, method = method) # original clustering method from phangorn::upgma, to compare to agnes agnes object need tweaking to be read by as.phylo
fel <- ape::as.phylo(hcfel)
fel <- reorder(fel, "postorder")
plot(fel)
fel$tip.label
pdf("/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_try_daisy_hclus.pdf", height=50)
ape::plot.phylo(phy)
dev.off()
pdf("/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_try_daisy_hclus.pdf", height=50)
ape::plot.phylo(fel)
dev.off()
data(strat2012)
library(phyloch)
data(strat2012)
axisGeo(strat2012)
pdf("/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_try_daisy_hclus.pdf")
ape::plot.phylo(fel)
data(strat2012)
axisGeo(strat2012)
dev.off()
source('~/Google Drive/datelife/datelife_code_2018.04.03.R')
DDdaisy <- cluster::daisy(x = Dfel)  # new from package cluster
DDdist <- as.dist(Dfel)  # original from upgma
DDdai <- cluster::daisy(x = Dfel)  # new from package cluster
DDdis <- as.dist(Dfel)  # original from upgma
str(DDdis)
DDdai <- cluster::daisy(x = Dfel)  # new from package cluster
str(DDdai)
is.na(DDdis)
as.dist
cluster:::daisy
methods(as.dist)
as.dist.default
as.dist
methods(as.dist.default)
as.dist.default
stats:::as.dist.default
getAnywhere(as.dist)
??daisy
str(DDdai)
str(DDdis)
names(DDdai)
dim(DDdai)
ls(DDdai)
type(DDdai)
class(DDdai)
typeof(DDdai)
DDdai[1]
DDdai[1,1]
length(DDdai)
is.vetor(DDdai)
is.vector(DDdai)
is.matrix(DDdai)
summary(DDdai)
Dfel_dai_euc <- cluster::daisy(Dfel, method= "euclidian")
Dfel_dai_euc <- cluster::daisy(Dfel, metric= "euclidian")
Dfel_dai_euc <- cluster::daisy(Dfel, metric= "euclidean")
Dfel_dai_man <- cluster::daisy(Dfel, metric= "manhattan")
Dfel_dai_euc
Dfel_dai_man <- cluster::daisy(Dfel, metric= "gower")
Dfel_dai_gow <- cluster::daisy(Dfel, metric= "gower")
Dfel_dai_man <- cluster::daisy(Dfel, metric= "manhattan")
hc <- hclust(Dfel_dai_euc, method = "average")
fel_sdm_dai_euc_hcl <- ape::as.phylo(hc)
fel_sdm_dai_euc_hcl <- reorder(fel_sdm_dai_euc_hcl, "postorder")
plot(fel_sdm_dai_euc_hcl)
# library(phyloch)
axisGeo(strat2012)
hc <- hclust(Dfel_dai_euc, method = "average")
fel_sdm_dai_euc_hcl <- ape::as.phylo(hc)
fel_sdm_dai_euc_hcl <- reorder(fel_sdm_dai_euc_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_euc_hcl.pdf")
plot(fel_sdm_dai_euc_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
hc <- hclust(Dfel_dai_man, method = "average")
fel_sdm_dai_man_hcl <- ape::as.phylo(hc)
fel_sdm_dai_man_hcl <- reorder(fel_sdm_dai_man_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_man_hcl.pdf")
plot(fel_sdm_dai_man_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
hc <- hclust(Dfel_dai_gow, method = "average")
fel_sdm_dai_gow_hcl <- ape::as.phylo(hc)
fel_sdm_dai_gow_hcl <- reorder(fel_sdm_dai_gow_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_gow_hcl.pdf")
plot(fel_sdm_dai_gow_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
mac(branching.times(felid_sdm$phy))
max(branching.times(felid_sdm$phy))
max(Dfel)
max(Dfel)/2
Dfel2 <- 0.5*Dfel
class(Dfel2)
max(Dfel2)
Dfel_dai_euc <- cluster::daisy(Dfel2, metric= "euclidean")
Dfel_dai_man <- cluster::daisy(Dfel2, metric= "manhattan")
Dfel_dai_gow <- cluster::daisy(Dfel2, metric= "gower")
hc <- hclust(Dfel_dai_euc, method = "average")
fel_sdm_dai_euc_hcl <- ape::as.phylo(hc)
fel_sdm_dai_euc_hcl <- reorder(fel_sdm_dai_euc_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_euc_hcl_2.pdf")
plot(fel_sdm_dai_euc_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
hc <- hclust(Dfel_dai_man, method = "average")
fel_sdm_dai_man_hcl <- ape::as.phylo(hc)
fel_sdm_dai_man_hcl <- reorder(fel_sdm_dai_man_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_man_hcl_2.pdf")
plot(fel_sdm_dai_man_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
hc <- hclust(Dfel_dai_gow, method = "average")
fel_sdm_dai_gow_hcl <- ape::as.phylo(hc)
fel_sdm_dai_gow_hcl <- reorder(fel_sdm_dai_gow_hcl, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_gow_hcl_2.pdf")
plot(fel_sdm_dai_gow_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
ac <- agnes(Dfel_dai_euc)
fel_sdm_dai_euc_agn <- ape::as.phylo(ac)
fel_sdm_dai_euc_agn <- reorder(fel_sdm_dai_euc_agn, "postorder")
str(ac)
str(hc)
class(ac)
class(hc)
class(ac) <- "hclust"
fel_sdm_dai_euc_agn <- ape::as.phylo(ac)
fel_sdm_dai_euc_agn <- reorder(fel_sdm_dai_euc_agn, "postorder")
pdf("~/Google Drive/datelife/dating_otol/3_felidae/felid_sdm_daisy_euc_agn_2.pdf")
plot(fel_sdm_dai_euc_hcl)
# library(phyloch)
axisGeo(strat2012)
dev.off()
names(felid_gdr_phylo_all)
names(felid_gdr_phylo_all$phylo_all)
for (i in 1:length(felid_gdr_phylo_all)){
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("*,", names(felid_gdr_phylo_all$phylo_all[i]))[1]
print(x)
}
grep("*,", names(felid_gdr_phylo_all$phylo_all[i]))
names(felid_gdr_phylo_all$phylo_all[i])
grep(",", names(felid_gdr_phylo_all$phylo_all[i]))
grep("[:alpha]*,", names(felid_gdr_phylo_all$phylo_all[i]))
grep("[:alpha]*,", names(felid_gdr_phylo_all$phylo_all[i]), value = TRUE)
grep("[:alpha]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i])), value = TRUE)
grep("[:alpha]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " "), value = TRUE)
strsplit(names(felid_gdr_phylo_all$phylo_all[i])
, split = " ")
grep("[:alpha]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("[:digit:]4,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("[:digit:]{4},", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("[:digit:]{4}.", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
strsplit(names(felid_gdr_phylo_all$phylo_all[i])
, split = " ")[[1]]
grep("[:digit:]", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("2", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep(".", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grepl(".", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
grep("[0,1,2,3,4,5,6,7,8,9]{4}.", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
for (i in 1:length(felid_gdr_phylo_all)){
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)[1]
x3 <- grep("[0,1,2,3,4,5,6,7,8,9]{4}.", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)[1]
title(paste0(x, if(length(x)>1) "et al.", x3))
}
length(felid_gdr_phylo_all)
for (i in 1:length(felid_gdr_phylo_all$phylo_all)){
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
x3 <- grep("[0,1,2,3,4,5,6,7,8,9]{4}[.]", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
title(paste(x[1], if(length(x)>1) "et al.", x3[1]))
}
for (i in 1:length(felid_gdr_phylo_all$phylo_all)){
pdf(paste0("~/Google Drive/datelife/dating_otol/3_felidae/felid_gdr_phylo_all/phylo", "i"))
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
x3 <- grep("[0,1,2,3,4,5,6,7,8,9]{4}[.]", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
title(paste(x[1], if(length(x)>1) "et al.", x3[1]))
dev.off()
}
for (i in 1:length(felid_gdr_phylo_all$phylo_all)){
pdf(paste0("~/Google Drive/datelife/dating_otol/3_felidae/felid_gdr_phylo_all/phylo", i))
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
x3 <- grep("[0,1,2,3,4,5,6,7,8,9]{4}[.]", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
title(paste(x[1], if(length(x)>1) "et al.", x3[1]))
dev.off()
}
for (i in 1:length(felid_gdr_phylo_all$phylo_all)){
pdf(paste0("~/Google Drive/datelife/dating_otol/3_felidae/felid_gdr_phylo_all/phylo", i, ".pdf"))
plot(felid_gdr_phylo_all$phylo_all[[i]])
axisGeo(strat2012)
# title(names(felid_gdr_phylo_all$phylo_all[i]))
x <- grep("[:alpha:]*,", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
x3 <- grep("[0,1,2,3,4,5,6,7,8,9]{4}[.]", strsplit(names(felid_gdr_phylo_all$phylo_all[i]), split = " ")[[1]], value = TRUE)
title(paste(x[1], if(length(x)>1) "et al.", x3[1]))
dev.off()
}
getMethod(hclust)
getMethods(hclust)
getAnywhere(hclust)
getAnywhere(reorder)
phangorn:::upgma
mt3 <- missing_taxa_check(missing_taxa = FALSE, dated_tree = felid_sdm$phy)  # returns "FALSE"
mt3
expect_false(mt3, "character") # output is a character vector
is.character(mt3)
expect_s3_class(mt3, "character") # output is a character vector
class(mt3)
mt2 <- missing_taxa_check(missing_taxa = NA, dated_tree = felid_sdm$phy)  # returns NA
class(mt2)
expect_s3_class(mt2, "character") # output is a character vector
expect_equal(mt2, "NA") # output is a character vector
mt2
mt2 <- missing_taxa_check(missing_taxa = NA, dated_tree = felid_sdm$phy)  # returns "NA"
mt2
dated_tree = felid_sdm$phy
missing_taxa = NA
badformat <- TRUE
is.data.frame(missing_taxa)
missing_taxa_phy <- input_process(missing_taxa)
missing_taxa_phy
inherits(missing_taxa_phy, "phylo")
as.character(missing_taxa)
which.is.na(missing_taxa)
anyNa(missing_taxa)
anyNA(missing_taxa)
as.character(NaN)
x3 <- tree_fix_brlen(tree = plant_bold_otol_tree, fixing_criterion = "negative", fixing_method = "mrbayes")
mt4 <- missing_taxa_check(missing_taxa = NULL, dated_tree = felid_sdm$phy)  # does not return error, bc missing_taxa can be NULL
mt4 <- missing_taxa_check(missing_taxa = NULL, dated_tree = felid_sdm$phy)  # does not return error, bc missing_taxa can be NULL
devtools::load_all()
devtools::load_all(pkg="~/Desktop/datelife/")
mt4 <- missing_taxa_check(missing_taxa = NULL, dated_tree = felid_sdm$phy)  # does not return error, bc missing_taxa can be NULL
mt4
length(NA)
results <- use_all_calibrations()
trees <- datelife_search(input = "((Zea mays,Oryza sativa),((Arabidopsis thaliana,(Glycine max,Medicago sativa)),Solanum lycopersicum)Pentapetalae);", summary_format = "phylo_all", partial = TRUE, use_tnrs = FALSE, approximate_match = TRUE, cache = opentree_chronograms, dating_method = "PATHd8")
expect_s3_class(trees[[1]], "phylo")
tree <- datelife_search(input = "(((((((Homo sapiens,(Ara ararauna,Alligator mississippiensis)Archosauria)Amniota,Salamandra atra)Tetrapoda,Katsuwonus pelamis)Euteleostomi,Carcharodon carcharias)Gnathostomata,Asymmetron lucayanum)Chordata,(Echinus esculentus,Linckia columbiae)Eleutherozoa)Deuterostomia,(((((Procambarus alleni,Homarus americanus)Astacidea,Callinectes sapidus),(Bombus balteatus,Periplaneta americana)Neoptera)Pancrustacea,Latrodectus mactans)Arthropoda,((Lineus longissimus,(Octopus vulgaris,Helix aspersa)),Lumbricus terrestris))Protostomia);", summary_format = "phylo.median", partial = TRUE, use_tnrs = FALSE, approximate_match = TRUE, dating_method = "PATHd8")
pdf(file = "/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_ltts_4_2018.04.05.pdf", height = 4, width = 4)
ape::ltt.plot(felid_gdr_phylo_all$phylo_all[[i]], xlim=c(-25,0), ylim = c(0, 100), col= "lightgrey")
for (i in 2:length(felid_gdr_phylo_all$phylo_all)){
ape::ltt.lines(felid_gdr_phylo_all$phylo_all[[i]], col= "lightgrey")
}
ape::ltt.lines(felid_sdm$phy, col = "#56B4E9")  # upgma tree
ape::ltt.lines(fel_sdm_dai_euc_hcl, col = "#CC79A7")  # even though the name dos not show it, the original matrix used to estimate this is 0.5*
# ape::ltt.plot(datelife_result_x_phylo[[1]], xlim=c(0, 30), backward = FALSE)  # added some missing taxa by congruifying with otols synthetic tree
# data(strat2012, package="phyloch")
# phyloch::axisGeo(strat2012)  # try this later
legend(legend = c("subset chronograms from OToL",
"SDM_dis_hcl",
"SDM_dai_euc_hcl2"),
x = -25, y = 100, cex = 0.6,
col = c("lightgrey", "#56B4E9", "#CC79A7"),
bty = "n", lty = 1)
dev.off()
pdf(file = "/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_ltts_4_2018.04.05.pdf", height = 4, width = 4)
ape::ltt.plot(felid_gdr_phylo_all$phylo_all[[i]], xlim=c(-25,0), ylim = c(0, 100), col= "lightgrey")
for (i in 2:length(felid_gdr_phylo_all$phylo_all)){
ape::ltt.lines(felid_gdr_phylo_all$phylo_all[[i]], col= "lightgrey")
}
ape::ltt.lines(felid_sdm$phy, col = "#56B4E9")  # upgma tree
ape::ltt.lines(fel_sdm_dai_euc_hcl, col = "#CC79A7")  # even though the name dos not show it, the original matrix used to estimate this is 0.5*
# ape::ltt.plot(datelife_result_x_phylo[[1]], xlim=c(0, 30), backward = FALSE)  # added some missing taxa by congruifying with otols synthetic tree
# data(strat2012, package="phyloch")
# phyloch::axisGeo(strat2012)  # try this later
legend(legend = c("subset chronograms from OToL",
"SDM_dis_hcl",
"SDM_dai_euc_hcl2"),
x = -25, y = 100, cex = 0.6,
col = c("lightgrey", "#56B4E9", "#CC79A7"),
bty = "n", lty = 1)
title("Felidae family chronograms" "as LTT plots")
dev.off()
pdf(file = "/Users/luna/Google Drive/datelife/dating_otol/3_felidae/felid_ltts_4_2018.04.05.pdf", height = 4, width = 4)
ape::ltt.plot(felid_gdr_phylo_all$phylo_all[[i]], xlim=c(-25,0), ylim = c(0, 100), col= "lightgrey")
for (i in 2:length(felid_gdr_phylo_all$phylo_all)){
ape::ltt.lines(felid_gdr_phylo_all$phylo_all[[i]], col= "lightgrey")
}
ape::ltt.lines(felid_sdm$phy, col = "#56B4E9")  # upgma tree
ape::ltt.lines(fel_sdm_dai_euc_hcl, col = "#CC79A7")  # even though the name dos not show it, the original matrix used to estimate this is 0.5*
# ape::ltt.plot(datelife_result_x_phylo[[1]], xlim=c(0, 30), backward = FALSE)  # added some missing taxa by congruifying with otols synthetic tree
# data(strat2012, package="phyloch")
# phyloch::axisGeo(strat2012)  # try this later
legend(legend = c("subset chronograms from OToL",
"SDM_dis_hcl",
"SDM_dai_euc_hcl2"),
x = -25, y = 100, cex = 0.6,
col = c("lightgrey", "#56B4E9", "#CC79A7"),
bty = "n", lty = 1)
title(c("Felidae family chronograms", "as LTT plots"))
dev.off()
devtools::load_all(pkg = "~/Desktop/datelife")
felid_sdm2 <- datelife_result_sdm(datelife_result = felid_sdm$data)
library(simTree)
install.packages(simTree)
install.packages("simTree")
?simTree
??simTree
library(simTree)
install.packages("TreeSim")
??TreeSim
phy <- TreeSim::sim.bd.taxa(4, 1, lambda = 1)
plot(phy)
plot(phy[[1]])
phy <- TreeSim::sim.bd.taxa(4, 1, lambda = 1)
phy <- TreeSim::sim.bd.taxa(4, 1, lambda = 1, mu = 0)
plot(phy[[1]])
phy <- ape::reorder.phylo(phy, "postorder")
plot(phy[[1]])
phy <- phy{{1}}
phy <- phy[[1]]
phy <- ape::reorder.phylo(phy, "postorder")
plot(phy)
phy$depths <- max(ape::branching.times(phy)) - phytools::nodeHeights(phy)
phy$depths
phy$depths.original <- phy$depths
phytools::nodeHeights(phy)
phy$edge
nodelabels()
phy$ed
phy$edge.length
edgelabels()
phy$edge.length
node.index = 1
phy$depths[node.index,2]
depth_multiplier=1
sd=1
phy$depths.original[node.index,2]
sd+sd*depth_multiplier*phy$depths.original[node.index,2]
sd + sd * depth_multiplier * max(ape::branching.times(phy)))
max(ape::branching.times(phy))
sd + sd * depth_multiplier * max(ape::branching.times(phy))
log(max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
log(max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rlnorm(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
rpois(1, mean = log(max(ape::branching.times(phy))), sd = sd + sd * depth_multiplier * max(ape::branching.times(phy)))
?rpois
phy$Ntip/max(ape::branching.times(phy))
phy$Ntip
phy$Ntips
ls(phy)
ape::Ntip(phy)/max(ape::branching.times(phy))
rpois(1, mean = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rpois(1, lambda = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy))
)
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
max(ape::branching.times(phy))
phy$edge.length * max(ape::branching.times(phy)) / new_length
new_length <- rexp(1, rate = ape::Ntip(phy)/max(ape::branching.times(phy)))
phy$edge.length * max(ape::branching.times(phy)) / new_length
new_length
(phy$edge.length * new_length) / max(ape::branching.times(phy))
phy$edge.length * new_length / max(ape::branching.times(phy))
